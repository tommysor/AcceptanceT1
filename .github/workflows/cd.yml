name: continuous-deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - '.vscode/*'
      - '.devcontainer/*'

permissions:
  id-token: write
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: false

env:
  CONTAINER_VERSION_TAG: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  basic-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'
    - run: dotnet workload restore
    - run: dotnet tool restore
    - run: dotnet test

  deploy-acr:
    runs-on: ubuntu-latest
    environment: Shared
    env:
      RG_ACR: ${{ vars.RG_ACR }}
    outputs:
      containerRegistryUrl: ${{ steps.deployAcr.outputs.containerRegistryUrl }}
      managedIdentityName: ${{ steps.deployAcr.outputs.managedIdentityName }}
      apiserviceContainerImage: ${{ steps.deployAcr.outputs.apiserviceContainerImage }}
      webfrontendContainerImage: ${{ steps.deployAcr.outputs.webfrontendContainerImage }}

    steps:
    - uses: actions/checkout@v4
    - name: 'Az login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: deploy acr
      id: deployAcr
      env:
        deploymentName: ${{ env.RG_ACR }}-$(date +%Y-%m-%dT%H.%M.%S)-$(git rev-parse --short ${{ github.sha }})
      run: |
        echo "Deploying Container registry"
        echo "deploymentName: ${{ env.deploymentName }}"

        az group create --location norwayeast --name ${{ env.RG_ACR }}

        az bicep lint --file .platform/acr.main.bicep

        deployResult=$(az deployment group create \
          --mode Complete \
          --resource-group "${{ env.RG_ACR }}" \
          --name "${{ env.deploymentName }}" \
          --template-file ./.platform/acr.main.bicep \
          )

        echo "# Deploy result"
        echo $deployResult
        echo "# ---"
        
        echo "# setting outputs"
        
        # containerRegistryUrl
        containerRegistryUrl=$(echo $deployResult | jq --raw-output '.properties.outputs.containerRegistryUrl.value')
        echo "containerRegistryUrl=$containerRegistryUrl" >> $GITHUB_OUTPUT
        # managedIdentityName
        managedIdentityName=$(echo $deployResult | jq --raw-output '.properties.outputs.managedIdentityName.value')
        echo "managedIdentityName: $managedIdentityName"
        echo "managedIdentityName=$managedIdentityName" >> $GITHUB_OUTPUT

        # Predict container image names now that we have the container registry url
        apiserviceContainerImage=$containerRegistryUrl/${{ vars.APISERVICE_CONTAINERREPOSITORY }}:${{ env.CONTAINER_VERSION_TAG }}
        echo "#SET apiserviceContainerImage=$apiserviceContainerImage"
        echo "apiserviceContainerImage=$apiserviceContainerImage" >> $GITHUB_OUTPUT
        webfrontendContainerImage=$containerRegistryUrl/${{ vars.WEBFRONTEND_CONTAINERREPOSITORY }}:${{ env.CONTAINER_VERSION_TAG }}
        echo "#SET webfrontendContainerImage=$webfrontendContainerImage"
        echo "webfrontendContainerImage=$webfrontendContainerImage" >> $GITHUB_OUTPUT
        centralTestDoubleContainerImage=$containerRegistryUrl/${{ vars.CENTRAL_TESTDOUBLE_CONTAINERREPOSITORY }}:${{ env.CONTAINER_VERSION_TAG }}
        echo "#SET centralTestDoubleContainerImage=$centralTestDoubleContainerImage"
        echo "centralTestDoubleContainerImage=$centralTestDoubleContainerImage" >> $GITHUB_OUTPUT
        
        echo "# done"

  publish-apiservice:
    runs-on: ubuntu-latest
    needs:
    - basic-tests
    - deploy-acr
    env:
      containerRegistryUrl: ${{ needs.deploy-acr.outputs.containerRegistryUrl }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'

    - name: 'Az login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: login containerRegistry
      run: az acr login --name ${{ env.containerRegistryUrl }}

    - name: publish apiservice
      run: |
        echo "Publishing apiservice"

        pushd src/DealWith.ApiService

        dotnet publish \
          -p ContainerRegistry='${{ env.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ vars.APISERVICE_CONTAINERREPOSITORY }}

        popd

  publish-webfrontend:
    runs-on: ubuntu-latest
    needs:
    - basic-tests
    - deploy-acr
    env:
      containerRegistryUrl: ${{ needs.deploy-acr.outputs.containerRegistryUrl }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'

    - name: 'Az login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: login containerRegistry
      run: az acr login --name ${{ env.containerRegistryUrl }}

    - name: publish webfrontend
      run: |
        echo "Publishing webfrontend"

        pushd src/DealWith.Web

        dotnet publish \
          -p ContainerRegistry='${{ env.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ vars.WEBFRONTEND_CONTAINERREPOSITORY }}

        popd

  publish-central-testdouble:
    runs-on: ubuntu-latest
    needs:
    - basic-tests
    - deploy-acr
    env:
      containerRegistryUrl: ${{ needs.deploy-acr.outputs.containerRegistryUrl }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0'
        dotnet-quality: 'preview'

    - name: 'Az login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: login containerRegistry
      run: az acr login --name ${{ env.containerRegistryUrl }}

    - name: publish central test double
      run: |
        echo "Publishing central test double"

        pushd src/CentralTestDouble

        dotnet publish \
          -p ContainerRegistry='${{ env.containerRegistryUrl }}' \
          -p PublishProfile=DefaultContainer \
          -p ContainerImageTags='"${{ env.CONTAINER_VERSION_TAG }}"' \
          -p ContainerRepository=${{ vars.CENTRAL_TESTDOUBLE_CONTAINERREPOSITORY }}

        popd

  echo-vals:
    runs-on: ubuntu-latest
    needs:
    - deploy-acr
    steps:
    - name: echotest
      run: |
        echo containerRegistryUrl: ${{ needs.deploy-acr.outputs.containerRegistryUrl }}
        echo managedIdentityName: ${{ needs.deploy-acr.outputs.managedIdentityName }}
        echo apiserviceContainerImage: ${{ needs.deploy-acr.outputs.apiserviceContainerImage }}
        echo webfrontendContainerImage: ${{ needs.deploy-acr.outputs.webfrontendContainerImage }}
        echo centralTestDoubleContainerImage: ${{ needs.deploy-acr.outputs.centralTestDoubleContainerImage }}

  deploy-test:
    uses: ./.github/workflows/deploy.yml
    needs:
    - deploy-acr
    - publish-central-testdouble
    - publish-apiservice
    - publish-webfrontend
    with:
      environment: 'Test'
      containerRegistryUrl: ${{ needs.deploy-acr.outputs.containerRegistryUrl }}
      managedIdentityName: ${{ needs.deploy-acr.outputs.managedIdentityName }}
      apiserviceContainerImage: ${{ needs.deploy-acr.outputs.apiserviceContainerImage }}
      webfrontendContainerImage: ${{ needs.deploy-acr.outputs.webfrontendContainerImage }}
      centralTestDoubleContainerImage: ${{ needs.deploy-acr.outputs.centralTestDoubleContainerImage }}
    secrets: inherit
